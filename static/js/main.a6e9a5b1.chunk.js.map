{"version":3,"sources":["components/List.tsx","components/AddToList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["List","people","map","person","className","src","img","alt","name","age","note","AddToList","setPeople","useState","input","setInput","handleChange","e","target","value","type","onChange","placeholder","onClick","parseInt","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wNA+BeA,EAxBgB,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAiB9B,OACI,6BAfOA,EAAOC,KAAI,SAAAC,GACd,OACI,qBAAIC,UAAU,OAAd,UACI,sBAAKA,UAAU,cAAf,UACI,qBAAKA,UAAU,WAAWC,IAAKF,EAAOG,IAAKC,IAAKJ,EAAOG,MACvD,6BAAKH,EAAOK,UAEhB,8BAAIL,EAAOM,IAAX,gBACA,mBAAGL,UAAU,YAAb,SAA0BD,EAAOO,SANXP,EAAOG,W,qBC4ElCK,EAhFqB,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,UAAWX,EAAY,EAAZA,OAE7C,EAA0BY,mBAAS,CAC/BL,KAAM,GACNC,IAAK,GACLC,KAAM,GACNJ,IAAK,KAJT,mBAAOQ,EAAP,KAAcC,EAAd,KAOMC,EAAe,SAACC,GAClBF,EAAS,2BACFD,GADC,kBAEHG,EAAEC,OAAOV,KAAOS,EAAEC,OAAOC,UAyBlC,OACI,sBAAKf,UAAU,YAAf,UACI,uBACIgB,KAAK,OACLC,SAAUL,EACVZ,UAAU,kBACVI,KAAK,OACLW,MAAOL,EAAMN,KACbc,YAAY,SAEhB,uBACIF,KAAK,OACLC,SAAUL,EACVZ,UAAU,kBACVI,KAAK,MACLW,MAAOL,EAAML,IACba,YAAY,QAEhB,uBACIF,KAAK,OACLC,SAAUL,EACVZ,UAAU,kBACVI,KAAK,MACLW,MAAOL,EAAMR,IACbgB,YAAY,cAEhB,0BACID,SAAUL,EACVZ,UAAU,kBACVI,KAAK,OACLW,MAAOL,EAAMJ,KACbY,YAAY,SAEhB,wBACIC,QAvDQ,WACZT,EAAMN,MAASM,EAAML,MAEzBG,EAAU,GAAD,mBACFX,GADE,CAEL,CACIO,KAAMM,EAAMN,KACZC,IAAKe,SAASV,EAAML,KACpBH,IAAKQ,EAAMR,IACXI,KAAMI,EAAMJ,SAIpBK,EAAS,CACLP,KAAM,GACNC,IAAK,GACLH,IAAK,GACLI,KAAM,OAuCFN,UAAU,gBAFd,6BCvCGqB,MAzBf,WAEE,MAA4BZ,mBAA2B,CACrD,CACEL,KAAM,eACNC,IAAK,GACLH,IAAK,6DACLI,KAAM,yCAER,CACEF,KAAM,cACNC,IAAK,GACLH,IAAK,sFAVT,mBAAOL,EAAP,KAAeW,EAAf,KAcA,OACE,sBAAKR,UAAU,MAAf,UACE,2NACA,cAAC,EAAD,CAAMH,OAAQA,IACd,cAAC,EAAD,CAAWW,UAAWA,EAAWX,OAAQA,QCpBhCyB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a6e9a5b1.chunk.js","sourcesContent":["import React from 'react'\nimport { IState as Props } from \"../App\";\n\ninterface IProps {\n    people: Props[\"people\"]\n}\n\nconst List: React.FC<IProps> = ({ people }) => {\n\n    const renderList = (): JSX.Element[] => {\n        return people.map(person => {\n            return (\n                <li className=\"List\" key={person.img}>\n                    <div className=\"List-header\">\n                        <img className=\"List-img\" src={person.img} alt={person.img}/>\n                        <h2>{person.name}</h2>\n                    </div>\n                    <p>{person.age} years old</p>\n                    <p className=\"List-note\">{person.note}</p>\n                </li>\n            )\n        })\n    }\n\n    return (\n        <ul>\n            {renderList()} \n        </ul>\n    )\n}\n\nexport default List\n","import React, { useState } from 'react'\nimport { IState as Props } from \"../App\";\n\ninterface IProps {\n    setPeople: React.Dispatch<React.SetStateAction<Props[\"people\"]>>\n    people: Props[\"people\"]\n}\n\nconst AddToList: React.FC<IProps> = ({setPeople, people}) => {\n\n    const [input, setInput] = useState({\n        name: \"\",\n        age: \"\",\n        note: \"\",\n        img: \"\"\n    }) \n\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        setInput({\n            ...input,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    const handleClick = () => {\n        if(!input.name || !input.age) return\n\n        setPeople([\n            ...people,\n            {\n                name: input.name,\n                age: parseInt(input.age),\n                img: input.img,\n                note: input.note\n            }\n        ]);\n\n        setInput({\n            name: \"\",\n            age: \"\",\n            img: \"\",\n            note: \"\"\n        })\n    }\n\n    return (\n        <div className=\"AddToList\">\n            <input \n                type=\"text\"\n                onChange={handleChange}\n                className=\"AddToList-input\"\n                name=\"name\"\n                value={input.name}\n                placeholder=\"Name\"\n            />\n            <input \n                type=\"text\"\n                onChange={handleChange}\n                className=\"AddToList-input\"\n                name=\"age\"\n                value={input.age}\n                placeholder=\"Age\"\n            />\n            <input \n                type=\"text\"\n                onChange={handleChange}\n                className=\"AddToList-input\"\n                name=\"img\"\n                value={input.img}\n                placeholder=\"Image Url\"\n            />\n            <textarea\n                onChange={handleChange}\n                className=\"AddToList-input\"\n                name=\"note\"\n                value={input.note}\n                placeholder=\"Note\"\n            />\n            <button\n                onClick={handleClick}\n                className=\"AddToList-btn\"\n            >\n                Add to List\n            </button>\n        </div>\n    )\n}\n\nexport default AddToList\n","import React, { useState } from 'react';\nimport './App.css';\nimport List from './components/List';\nimport AddToList from './components/AddToList';\n\nexport interface IState {\n  people: {\n      name: string\n      age: number\n      img: string\n      note?: string\n  }[]\n}\n\nfunction App() {\n\n  const [people, setPeople] = useState<IState[\"people\"]>([\n    {\n      name: \"LeBron James\",\n      age: 35,\n      img: \"https://cdn.nba.com/headshots/nba/latest/1040x760/2544.png\",\n      note: \"Allegeric to staying on the same team\",\n    },\n    {\n      name: \"Kobe Bryant\",\n      age: 42,\n      img: \"https://fullpresscoverage.com/wp-content/uploads/2020/01/101524695-457220551.jpg\"\n    }\n  ])\n\n  return (\n    <div className=\"App\">\n      <h1>Люди, приглашенные на мою вечеринку</h1>\n      <List people={people}/>\n      <AddToList setPeople={setPeople} people={people}/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}